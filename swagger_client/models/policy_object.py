# coding: utf-8

"""
    PRISM NBAPI

    This is a PRISM NBAPI API Client module.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: contact@kulcloud.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.policy_action_object import PolicyActionObject  # noqa: F401,E501


class PolicyObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'in_port': 'str',
        'eg_port': 'str',
        'filter': 'list[str]',
        'rate_limit': 'str',
        'policy_action': 'list[PolicyActionObject]',
        'policy_name': 'str'
    }

    attribute_map = {
        'in_port': 'in_port',
        'eg_port': 'eg_port',
        'filter': 'filter',
        'rate_limit': 'rate_limit',
        'policy_action': 'policy_action',
        'policy_name': 'policy_name'
    }

    def __init__(self, in_port=None, eg_port=None, filter=None, rate_limit=None, policy_action=None, policy_name=None):  # noqa: E501
        """PolicyObject - a model defined in Swagger"""  # noqa: E501

        self._in_port = None
        self._eg_port = None
        self._filter = None
        self._rate_limit = None
        self._policy_action = None
        self._policy_name = None
        self.discriminator = None

        if in_port is not None:
            self.in_port = in_port
        if eg_port is not None:
            self.eg_port = eg_port
        if filter is not None:
            self.filter = filter
        if rate_limit is not None:
            self.rate_limit = rate_limit
        if policy_action is not None:
            self.policy_action = policy_action
        if policy_name is not None:
            self.policy_name = policy_name

    @property
    def in_port(self):
        """Gets the in_port of this PolicyObject.  # noqa: E501


        :return: The in_port of this PolicyObject.  # noqa: E501
        :rtype: str
        """
        return self._in_port

    @in_port.setter
    def in_port(self, in_port):
        """Sets the in_port of this PolicyObject.


        :param in_port: The in_port of this PolicyObject.  # noqa: E501
        :type: str
        """

        self._in_port = in_port

    @property
    def eg_port(self):
        """Gets the eg_port of this PolicyObject.  # noqa: E501


        :return: The eg_port of this PolicyObject.  # noqa: E501
        :rtype: str
        """
        return self._eg_port

    @eg_port.setter
    def eg_port(self, eg_port):
        """Sets the eg_port of this PolicyObject.


        :param eg_port: The eg_port of this PolicyObject.  # noqa: E501
        :type: str
        """

        self._eg_port = eg_port

    @property
    def filter(self):
        """Gets the filter of this PolicyObject.  # noqa: E501


        :return: The filter of this PolicyObject.  # noqa: E501
        :rtype: list[str]
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this PolicyObject.


        :param filter: The filter of this PolicyObject.  # noqa: E501
        :type: list[str]
        """

        self._filter = filter

    @property
    def rate_limit(self):
        """Gets the rate_limit of this PolicyObject.  # noqa: E501


        :return: The rate_limit of this PolicyObject.  # noqa: E501
        :rtype: str
        """
        return self._rate_limit

    @rate_limit.setter
    def rate_limit(self, rate_limit):
        """Sets the rate_limit of this PolicyObject.


        :param rate_limit: The rate_limit of this PolicyObject.  # noqa: E501
        :type: str
        """

        self._rate_limit = rate_limit

    @property
    def policy_action(self):
        """Gets the policy_action of this PolicyObject.  # noqa: E501


        :return: The policy_action of this PolicyObject.  # noqa: E501
        :rtype: list[PolicyActionObject]
        """
        return self._policy_action

    @policy_action.setter
    def policy_action(self, policy_action):
        """Sets the policy_action of this PolicyObject.


        :param policy_action: The policy_action of this PolicyObject.  # noqa: E501
        :type: list[PolicyActionObject]
        """

        self._policy_action = policy_action

    @property
    def policy_name(self):
        """Gets the policy_name of this PolicyObject.  # noqa: E501


        :return: The policy_name of this PolicyObject.  # noqa: E501
        :rtype: str
        """
        return self._policy_name

    @policy_name.setter
    def policy_name(self, policy_name):
        """Sets the policy_name of this PolicyObject.


        :param policy_name: The policy_name of this PolicyObject.  # noqa: E501
        :type: str
        """

        self._policy_name = policy_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PolicyObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PolicyObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    PRISM NBAPI

    This is a PRISM NBAPI API Client module.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: contact@kulcloud.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class FilterApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_filter(self, filter_object, **kwargs):  # noqa: E501
        """Create NPB Filter  # noqa: E501

        Create NPB Filter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_filter(filter_object, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FilterObject filter_object: Filter Object (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_filter_with_http_info(filter_object, **kwargs)  # noqa: E501
        else:
            (data) = self.create_filter_with_http_info(filter_object, **kwargs)  # noqa: E501
            return data

    def create_filter_with_http_info(self, filter_object, **kwargs):  # noqa: E501
        """Create NPB Filter  # noqa: E501

        Create NPB Filter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_filter_with_http_info(filter_object, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FilterObject filter_object: Filter Object (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter_object']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_filter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'filter_object' is set
        if ('filter_object' not in params or
                params['filter_object'] is None):
            raise ValueError("Missing the required parameter `filter_object` when calling `create_filter`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'filter_object' in params:
            body_params = params['filter_object']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/tapping/filter/service', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_filter(self, filter_name, **kwargs):  # noqa: E501
        """Delete NPB Filter  # noqa: E501

        Delete NPB Filter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_filter(filter_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filter_name: Filter Name (required)
        :return: FilterName
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_filter_with_http_info(filter_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_filter_with_http_info(filter_name, **kwargs)  # noqa: E501
            return data

    def delete_filter_with_http_info(self, filter_name, **kwargs):  # noqa: E501
        """Delete NPB Filter  # noqa: E501

        Delete NPB Filter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_filter_with_http_info(filter_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filter_name: Filter Name (required)
        :return: FilterName
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_filter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'filter_name' is set
        if ('filter_name' not in params or
                params['filter_name'] is None):
            raise ValueError("Missing the required parameter `filter_name` when calling `delete_filter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'filter_name' in params:
            path_params['filter_name'] = params['filter_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/tapping/filter/service/{filter_name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FilterName',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_filter(self, **kwargs):  # noqa: E501
        """Get NPB Filter All  # noqa: E501

        Get NPB Filter All  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_filter(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: FilterRespList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_filter_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_filter_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_filter_with_http_info(self, **kwargs):  # noqa: E501
        """Get NPB Filter All  # noqa: E501

        Get NPB Filter All  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_filter_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: FilterRespList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_filter" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/tapping/filter/service/all', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FilterRespList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_filter(self, filter_name, **kwargs):  # noqa: E501
        """Get NPB Filter  # noqa: E501

        Get NPB Filter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_filter(filter_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filter_name: Filter Name (required)
        :return: FilterResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_filter_with_http_info(filter_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_filter_with_http_info(filter_name, **kwargs)  # noqa: E501
            return data

    def get_filter_with_http_info(self, filter_name, **kwargs):  # noqa: E501
        """Get NPB Filter  # noqa: E501

        Get NPB Filter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_filter_with_http_info(filter_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filter_name: Filter Name (required)
        :return: FilterResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_filter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'filter_name' is set
        if ('filter_name' not in params or
                params['filter_name'] is None):
            raise ValueError("Missing the required parameter `filter_name` when calling `get_filter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'filter_name' in params:
            path_params['filter_name'] = params['filter_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/tapping/filter/service/{filter_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FilterResp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_filter(self, filter_name, filter_object, **kwargs):  # noqa: E501
        """Update NPB Filter  # noqa: E501

        Update NPB Filter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_filter(filter_name, filter_object, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filter_name: filter name (required)
        :param FilterObject filter_object: Filter Object (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_filter_with_http_info(filter_name, filter_object, **kwargs)  # noqa: E501
        else:
            (data) = self.update_filter_with_http_info(filter_name, filter_object, **kwargs)  # noqa: E501
            return data

    def update_filter_with_http_info(self, filter_name, filter_object, **kwargs):  # noqa: E501
        """Update NPB Filter  # noqa: E501

        Update NPB Filter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_filter_with_http_info(filter_name, filter_object, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filter_name: filter name (required)
        :param FilterObject filter_object: Filter Object (required)
        :return: SuccessMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter_name', 'filter_object']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_filter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'filter_name' is set
        if ('filter_name' not in params or
                params['filter_name'] is None):
            raise ValueError("Missing the required parameter `filter_name` when calling `update_filter`")  # noqa: E501
        # verify the required parameter 'filter_object' is set
        if ('filter_object' not in params or
                params['filter_object'] is None):
            raise ValueError("Missing the required parameter `filter_object` when calling `update_filter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'filter_name' in params:
            path_params['filter_name'] = params['filter_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'filter_object' in params:
            body_params = params['filter_object']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/tapping/filter/service/{filter_name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessMessage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

# coding: utf-8

"""
    PRISM NBAPI

    This is a PRISM NBAPI API Client module.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: contact@kulcloud.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class StatisticsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_all_policy_statistics(self, dpid, **kwargs):  # noqa: E501
        """Get NPB Statistics of All Policy  # noqa: E501

        Get NPB Statistics of All Policy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_policy_statistics(dpid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dpid: dpid name (required)
        :return: ALLPolicyStatisticsRespList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_policy_statistics_with_http_info(dpid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_policy_statistics_with_http_info(dpid, **kwargs)  # noqa: E501
            return data

    def get_all_policy_statistics_with_http_info(self, dpid, **kwargs):  # noqa: E501
        """Get NPB Statistics of All Policy  # noqa: E501

        Get NPB Statistics of All Policy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_policy_statistics_with_http_info(dpid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dpid: dpid name (required)
        :return: ALLPolicyStatisticsRespList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dpid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_policy_statistics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dpid' is set
        if ('dpid' not in params or
                params['dpid'] is None):
            raise ValueError("Missing the required parameter `dpid` when calling `get_all_policy_statistics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dpid' in params:
            path_params['dpid'] = params['dpid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/tapping/{dpid}/stat/realtime/policy/all', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ALLPolicyStatisticsRespList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_port_statistics(self, dpid, **kwargs):  # noqa: E501
        """Get NPB Statistics of All Port  # noqa: E501

        Get NPB Statistics of All Port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_port_statistics(dpid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dpid: dpid name (required)
        :return: ALLPortStatisticsRespList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_port_statistics_with_http_info(dpid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_port_statistics_with_http_info(dpid, **kwargs)  # noqa: E501
            return data

    def get_all_port_statistics_with_http_info(self, dpid, **kwargs):  # noqa: E501
        """Get NPB Statistics of All Port  # noqa: E501

        Get NPB Statistics of All Port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_port_statistics_with_http_info(dpid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dpid: dpid name (required)
        :return: ALLPortStatisticsRespList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dpid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_port_statistics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dpid' is set
        if ('dpid' not in params or
                params['dpid'] is None):
            raise ValueError("Missing the required parameter `dpid` when calling `get_all_port_statistics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dpid' in params:
            path_params['dpid'] = params['dpid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/tapping/{dpid}/stat/port/all', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ALLPortStatisticsRespList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_enable_all_policy_statistics(self, dpid, state, **kwargs):  # noqa: E501
        """Enable NPB Statistics of All Policy  # noqa: E501

        Enable NPB Statistics of All Policy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_enable_all_policy_statistics(dpid, state, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dpid: dpid name (required)
        :param str state: state (required)
        :return: EnablePolicyStatistics
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_enable_all_policy_statistics_with_http_info(dpid, state, **kwargs)  # noqa: E501
        else:
            (data) = self.get_enable_all_policy_statistics_with_http_info(dpid, state, **kwargs)  # noqa: E501
            return data

    def get_enable_all_policy_statistics_with_http_info(self, dpid, state, **kwargs):  # noqa: E501
        """Enable NPB Statistics of All Policy  # noqa: E501

        Enable NPB Statistics of All Policy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_enable_all_policy_statistics_with_http_info(dpid, state, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dpid: dpid name (required)
        :param str state: state (required)
        :return: EnablePolicyStatistics
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dpid', 'state']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_enable_all_policy_statistics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dpid' is set
        if ('dpid' not in params or
                params['dpid'] is None):
            raise ValueError("Missing the required parameter `dpid` when calling `get_enable_all_policy_statistics`")  # noqa: E501
        # verify the required parameter 'state' is set
        if ('state' not in params or
                params['state'] is None):
            raise ValueError("Missing the required parameter `state` when calling `get_enable_all_policy_statistics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dpid' in params:
            path_params['dpid'] = params['dpid']  # noqa: E501
        if 'state' in params:
            path_params['state'] = params['state']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/tapping/{dpid}/stat/nonrealtime/{state}/policy/all', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EnablePolicyStatistics',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_policy_statistics(self, dpid, policy_name, **kwargs):  # noqa: E501
        """Get NPB Statistics of Policy  # noqa: E501

        Get NPB Statistics of Policy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_policy_statistics(dpid, policy_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dpid: Policy Name (required)
        :param str policy_name: Policy Name (required)
        :return: PolicyStatisticsList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_policy_statistics_with_http_info(dpid, policy_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_policy_statistics_with_http_info(dpid, policy_name, **kwargs)  # noqa: E501
            return data

    def get_policy_statistics_with_http_info(self, dpid, policy_name, **kwargs):  # noqa: E501
        """Get NPB Statistics of Policy  # noqa: E501

        Get NPB Statistics of Policy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_policy_statistics_with_http_info(dpid, policy_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dpid: Policy Name (required)
        :param str policy_name: Policy Name (required)
        :return: PolicyStatisticsList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dpid', 'policy_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_policy_statistics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dpid' is set
        if ('dpid' not in params or
                params['dpid'] is None):
            raise ValueError("Missing the required parameter `dpid` when calling `get_policy_statistics`")  # noqa: E501
        # verify the required parameter 'policy_name' is set
        if ('policy_name' not in params or
                params['policy_name'] is None):
            raise ValueError("Missing the required parameter `policy_name` when calling `get_policy_statistics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dpid' in params:
            path_params['dpid'] = params['dpid']  # noqa: E501
        if 'policy_name' in params:
            path_params['policy_name'] = params['policy_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/tapping/{dpid}/stat/realtime/policy/{policy_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PolicyStatisticsList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_policy_statistics_duration_nonreal(self, dpid, start_time, end_time, policy_name, **kwargs):  # noqa: E501
        """Get NPB Non realtime Statistics of Policy  # noqa: E501

        Get NPB Non realtime Statistics of Policy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_policy_statistics_duration_nonreal(dpid, start_time, end_time, policy_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dpid: dpid name (required)
        :param str start_time: start_time (required)
        :param str end_time: end_time (required)
        :param str policy_name: policy name (required)
        :return: PolicyStatisticsDurationRespList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_policy_statistics_duration_nonreal_with_http_info(dpid, start_time, end_time, policy_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_policy_statistics_duration_nonreal_with_http_info(dpid, start_time, end_time, policy_name, **kwargs)  # noqa: E501
            return data

    def get_policy_statistics_duration_nonreal_with_http_info(self, dpid, start_time, end_time, policy_name, **kwargs):  # noqa: E501
        """Get NPB Non realtime Statistics of Policy  # noqa: E501

        Get NPB Non realtime Statistics of Policy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_policy_statistics_duration_nonreal_with_http_info(dpid, start_time, end_time, policy_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dpid: dpid name (required)
        :param str start_time: start_time (required)
        :param str end_time: end_time (required)
        :param str policy_name: policy name (required)
        :return: PolicyStatisticsDurationRespList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dpid', 'start_time', 'end_time', 'policy_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_policy_statistics_duration_nonreal" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dpid' is set
        if ('dpid' not in params or
                params['dpid'] is None):
            raise ValueError("Missing the required parameter `dpid` when calling `get_policy_statistics_duration_nonreal`")  # noqa: E501
        # verify the required parameter 'start_time' is set
        if ('start_time' not in params or
                params['start_time'] is None):
            raise ValueError("Missing the required parameter `start_time` when calling `get_policy_statistics_duration_nonreal`")  # noqa: E501
        # verify the required parameter 'end_time' is set
        if ('end_time' not in params or
                params['end_time'] is None):
            raise ValueError("Missing the required parameter `end_time` when calling `get_policy_statistics_duration_nonreal`")  # noqa: E501
        # verify the required parameter 'policy_name' is set
        if ('policy_name' not in params or
                params['policy_name'] is None):
            raise ValueError("Missing the required parameter `policy_name` when calling `get_policy_statistics_duration_nonreal`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dpid' in params:
            path_params['dpid'] = params['dpid']  # noqa: E501
        if 'start_time' in params:
            path_params['start_time'] = params['start_time']  # noqa: E501
        if 'end_time' in params:
            path_params['end_time'] = params['end_time']  # noqa: E501
        if 'policy_name' in params:
            path_params['policy_name'] = params['policy_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/tapping/{dpid}/stat/nonrealtime/{start_time}/{end_time}/policy/{policy_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PolicyStatisticsDurationRespList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_policy_statistics_nonreal(self, dpid, time, policy_name, **kwargs):  # noqa: E501
        """Get NPB Non realtime Statistics of Policy  # noqa: E501

        Get NPB Non realtime Statistics of Policy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_policy_statistics_nonreal(dpid, time, policy_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dpid: dpid name (required)
        :param str time: time (required)
        :param str policy_name: policy name (required)
        :return: PolicyStatisticsNonrealRespList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_policy_statistics_nonreal_with_http_info(dpid, time, policy_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_policy_statistics_nonreal_with_http_info(dpid, time, policy_name, **kwargs)  # noqa: E501
            return data

    def get_policy_statistics_nonreal_with_http_info(self, dpid, time, policy_name, **kwargs):  # noqa: E501
        """Get NPB Non realtime Statistics of Policy  # noqa: E501

        Get NPB Non realtime Statistics of Policy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_policy_statistics_nonreal_with_http_info(dpid, time, policy_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dpid: dpid name (required)
        :param str time: time (required)
        :param str policy_name: policy name (required)
        :return: PolicyStatisticsNonrealRespList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dpid', 'time', 'policy_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_policy_statistics_nonreal" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dpid' is set
        if ('dpid' not in params or
                params['dpid'] is None):
            raise ValueError("Missing the required parameter `dpid` when calling `get_policy_statistics_nonreal`")  # noqa: E501
        # verify the required parameter 'time' is set
        if ('time' not in params or
                params['time'] is None):
            raise ValueError("Missing the required parameter `time` when calling `get_policy_statistics_nonreal`")  # noqa: E501
        # verify the required parameter 'policy_name' is set
        if ('policy_name' not in params or
                params['policy_name'] is None):
            raise ValueError("Missing the required parameter `policy_name` when calling `get_policy_statistics_nonreal`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dpid' in params:
            path_params['dpid'] = params['dpid']  # noqa: E501
        if 'time' in params:
            path_params['time'] = params['time']  # noqa: E501
        if 'policy_name' in params:
            path_params['policy_name'] = params['policy_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/tapping/{dpid}/stat/nonrealtime/{time}/policy/{policy_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PolicyStatisticsNonrealRespList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_port_statistics(self, dpid, port_num, **kwargs):  # noqa: E501
        """Get NPB Statistics of Port  # noqa: E501

        Get NPB Statistics of Port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_port_statistics(dpid, port_num, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dpid: dpid name (required)
        :param str port_num: port number (required)
        :return: PortStatisticsRespList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_port_statistics_with_http_info(dpid, port_num, **kwargs)  # noqa: E501
        else:
            (data) = self.get_port_statistics_with_http_info(dpid, port_num, **kwargs)  # noqa: E501
            return data

    def get_port_statistics_with_http_info(self, dpid, port_num, **kwargs):  # noqa: E501
        """Get NPB Statistics of Port  # noqa: E501

        Get NPB Statistics of Port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_port_statistics_with_http_info(dpid, port_num, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dpid: dpid name (required)
        :param str port_num: port number (required)
        :return: PortStatisticsRespList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dpid', 'port_num']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_port_statistics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dpid' is set
        if ('dpid' not in params or
                params['dpid'] is None):
            raise ValueError("Missing the required parameter `dpid` when calling `get_port_statistics`")  # noqa: E501
        # verify the required parameter 'port_num' is set
        if ('port_num' not in params or
                params['port_num'] is None):
            raise ValueError("Missing the required parameter `port_num` when calling `get_port_statistics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dpid' in params:
            path_params['dpid'] = params['dpid']  # noqa: E501
        if 'port_num' in params:
            path_params['port_num'] = params['port_num']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/tapping/{dpid}/stat/port/{port_num}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortStatisticsRespList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

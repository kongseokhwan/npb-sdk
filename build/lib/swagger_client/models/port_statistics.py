# coding: utf-8

"""
    PRISM NBAPI

    This is a PRISM NBAPI API Client module.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: contact@kulcloud.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PortStatistics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tx_dropped': 'str',
        'rx_packets': 'str',
        'rx_crc_err': 'str',
        'tx_bytes': 'str',
        'rx_dropped': 'str',
        'port_no': 'str',
        'rx_over_err': 'str',
        'rx_frame_err': 'str',
        'rx_bytes': 'str',
        'tx_errors': 'str',
        'duration_nsec': 'str',
        'collisions': 'str',
        'duration_sec': 'str',
        'rx_errors': 'str',
        'tx_packets': 'str'
    }

    attribute_map = {
        'tx_dropped': 'tx_dropped',
        'rx_packets': 'rx_packets',
        'rx_crc_err': 'rx_crc_err',
        'tx_bytes': 'tx_bytes',
        'rx_dropped': 'rx_dropped',
        'port_no': 'port_no',
        'rx_over_err': 'rx_over_err',
        'rx_frame_err': 'rx_frame_err',
        'rx_bytes': 'rx_bytes',
        'tx_errors': 'tx_errors',
        'duration_nsec': 'duration_nsec',
        'collisions': 'collisions',
        'duration_sec': 'duration_sec',
        'rx_errors': 'rx_errors',
        'tx_packets': 'tx_packets'
    }

    def __init__(self, tx_dropped=None, rx_packets=None, rx_crc_err=None, tx_bytes=None, rx_dropped=None, port_no=None, rx_over_err=None, rx_frame_err=None, rx_bytes=None, tx_errors=None, duration_nsec=None, collisions=None, duration_sec=None, rx_errors=None, tx_packets=None):  # noqa: E501
        """PortStatistics - a model defined in Swagger"""  # noqa: E501

        self._tx_dropped = None
        self._rx_packets = None
        self._rx_crc_err = None
        self._tx_bytes = None
        self._rx_dropped = None
        self._port_no = None
        self._rx_over_err = None
        self._rx_frame_err = None
        self._rx_bytes = None
        self._tx_errors = None
        self._duration_nsec = None
        self._collisions = None
        self._duration_sec = None
        self._rx_errors = None
        self._tx_packets = None
        self.discriminator = None

        if tx_dropped is not None:
            self.tx_dropped = tx_dropped
        if rx_packets is not None:
            self.rx_packets = rx_packets
        if rx_crc_err is not None:
            self.rx_crc_err = rx_crc_err
        if tx_bytes is not None:
            self.tx_bytes = tx_bytes
        if rx_dropped is not None:
            self.rx_dropped = rx_dropped
        if port_no is not None:
            self.port_no = port_no
        if rx_over_err is not None:
            self.rx_over_err = rx_over_err
        if rx_frame_err is not None:
            self.rx_frame_err = rx_frame_err
        if rx_bytes is not None:
            self.rx_bytes = rx_bytes
        if tx_errors is not None:
            self.tx_errors = tx_errors
        if duration_nsec is not None:
            self.duration_nsec = duration_nsec
        if collisions is not None:
            self.collisions = collisions
        if duration_sec is not None:
            self.duration_sec = duration_sec
        if rx_errors is not None:
            self.rx_errors = rx_errors
        if tx_packets is not None:
            self.tx_packets = tx_packets

    @property
    def tx_dropped(self):
        """Gets the tx_dropped of this PortStatistics.  # noqa: E501


        :return: The tx_dropped of this PortStatistics.  # noqa: E501
        :rtype: str
        """
        return self._tx_dropped

    @tx_dropped.setter
    def tx_dropped(self, tx_dropped):
        """Sets the tx_dropped of this PortStatistics.


        :param tx_dropped: The tx_dropped of this PortStatistics.  # noqa: E501
        :type: str
        """

        self._tx_dropped = tx_dropped

    @property
    def rx_packets(self):
        """Gets the rx_packets of this PortStatistics.  # noqa: E501


        :return: The rx_packets of this PortStatistics.  # noqa: E501
        :rtype: str
        """
        return self._rx_packets

    @rx_packets.setter
    def rx_packets(self, rx_packets):
        """Sets the rx_packets of this PortStatistics.


        :param rx_packets: The rx_packets of this PortStatistics.  # noqa: E501
        :type: str
        """

        self._rx_packets = rx_packets

    @property
    def rx_crc_err(self):
        """Gets the rx_crc_err of this PortStatistics.  # noqa: E501


        :return: The rx_crc_err of this PortStatistics.  # noqa: E501
        :rtype: str
        """
        return self._rx_crc_err

    @rx_crc_err.setter
    def rx_crc_err(self, rx_crc_err):
        """Sets the rx_crc_err of this PortStatistics.


        :param rx_crc_err: The rx_crc_err of this PortStatistics.  # noqa: E501
        :type: str
        """

        self._rx_crc_err = rx_crc_err

    @property
    def tx_bytes(self):
        """Gets the tx_bytes of this PortStatistics.  # noqa: E501


        :return: The tx_bytes of this PortStatistics.  # noqa: E501
        :rtype: str
        """
        return self._tx_bytes

    @tx_bytes.setter
    def tx_bytes(self, tx_bytes):
        """Sets the tx_bytes of this PortStatistics.


        :param tx_bytes: The tx_bytes of this PortStatistics.  # noqa: E501
        :type: str
        """

        self._tx_bytes = tx_bytes

    @property
    def rx_dropped(self):
        """Gets the rx_dropped of this PortStatistics.  # noqa: E501


        :return: The rx_dropped of this PortStatistics.  # noqa: E501
        :rtype: str
        """
        return self._rx_dropped

    @rx_dropped.setter
    def rx_dropped(self, rx_dropped):
        """Sets the rx_dropped of this PortStatistics.


        :param rx_dropped: The rx_dropped of this PortStatistics.  # noqa: E501
        :type: str
        """

        self._rx_dropped = rx_dropped

    @property
    def port_no(self):
        """Gets the port_no of this PortStatistics.  # noqa: E501


        :return: The port_no of this PortStatistics.  # noqa: E501
        :rtype: str
        """
        return self._port_no

    @port_no.setter
    def port_no(self, port_no):
        """Sets the port_no of this PortStatistics.


        :param port_no: The port_no of this PortStatistics.  # noqa: E501
        :type: str
        """

        self._port_no = port_no

    @property
    def rx_over_err(self):
        """Gets the rx_over_err of this PortStatistics.  # noqa: E501


        :return: The rx_over_err of this PortStatistics.  # noqa: E501
        :rtype: str
        """
        return self._rx_over_err

    @rx_over_err.setter
    def rx_over_err(self, rx_over_err):
        """Sets the rx_over_err of this PortStatistics.


        :param rx_over_err: The rx_over_err of this PortStatistics.  # noqa: E501
        :type: str
        """

        self._rx_over_err = rx_over_err

    @property
    def rx_frame_err(self):
        """Gets the rx_frame_err of this PortStatistics.  # noqa: E501


        :return: The rx_frame_err of this PortStatistics.  # noqa: E501
        :rtype: str
        """
        return self._rx_frame_err

    @rx_frame_err.setter
    def rx_frame_err(self, rx_frame_err):
        """Sets the rx_frame_err of this PortStatistics.


        :param rx_frame_err: The rx_frame_err of this PortStatistics.  # noqa: E501
        :type: str
        """

        self._rx_frame_err = rx_frame_err

    @property
    def rx_bytes(self):
        """Gets the rx_bytes of this PortStatistics.  # noqa: E501


        :return: The rx_bytes of this PortStatistics.  # noqa: E501
        :rtype: str
        """
        return self._rx_bytes

    @rx_bytes.setter
    def rx_bytes(self, rx_bytes):
        """Sets the rx_bytes of this PortStatistics.


        :param rx_bytes: The rx_bytes of this PortStatistics.  # noqa: E501
        :type: str
        """

        self._rx_bytes = rx_bytes

    @property
    def tx_errors(self):
        """Gets the tx_errors of this PortStatistics.  # noqa: E501


        :return: The tx_errors of this PortStatistics.  # noqa: E501
        :rtype: str
        """
        return self._tx_errors

    @tx_errors.setter
    def tx_errors(self, tx_errors):
        """Sets the tx_errors of this PortStatistics.


        :param tx_errors: The tx_errors of this PortStatistics.  # noqa: E501
        :type: str
        """

        self._tx_errors = tx_errors

    @property
    def duration_nsec(self):
        """Gets the duration_nsec of this PortStatistics.  # noqa: E501


        :return: The duration_nsec of this PortStatistics.  # noqa: E501
        :rtype: str
        """
        return self._duration_nsec

    @duration_nsec.setter
    def duration_nsec(self, duration_nsec):
        """Sets the duration_nsec of this PortStatistics.


        :param duration_nsec: The duration_nsec of this PortStatistics.  # noqa: E501
        :type: str
        """

        self._duration_nsec = duration_nsec

    @property
    def collisions(self):
        """Gets the collisions of this PortStatistics.  # noqa: E501


        :return: The collisions of this PortStatistics.  # noqa: E501
        :rtype: str
        """
        return self._collisions

    @collisions.setter
    def collisions(self, collisions):
        """Sets the collisions of this PortStatistics.


        :param collisions: The collisions of this PortStatistics.  # noqa: E501
        :type: str
        """

        self._collisions = collisions

    @property
    def duration_sec(self):
        """Gets the duration_sec of this PortStatistics.  # noqa: E501


        :return: The duration_sec of this PortStatistics.  # noqa: E501
        :rtype: str
        """
        return self._duration_sec

    @duration_sec.setter
    def duration_sec(self, duration_sec):
        """Sets the duration_sec of this PortStatistics.


        :param duration_sec: The duration_sec of this PortStatistics.  # noqa: E501
        :type: str
        """

        self._duration_sec = duration_sec

    @property
    def rx_errors(self):
        """Gets the rx_errors of this PortStatistics.  # noqa: E501


        :return: The rx_errors of this PortStatistics.  # noqa: E501
        :rtype: str
        """
        return self._rx_errors

    @rx_errors.setter
    def rx_errors(self, rx_errors):
        """Sets the rx_errors of this PortStatistics.


        :param rx_errors: The rx_errors of this PortStatistics.  # noqa: E501
        :type: str
        """

        self._rx_errors = rx_errors

    @property
    def tx_packets(self):
        """Gets the tx_packets of this PortStatistics.  # noqa: E501


        :return: The tx_packets of this PortStatistics.  # noqa: E501
        :rtype: str
        """
        return self._tx_packets

    @tx_packets.setter
    def tx_packets(self, tx_packets):
        """Sets the tx_packets of this PortStatistics.


        :param tx_packets: The tx_packets of this PortStatistics.  # noqa: E501
        :type: str
        """

        self._tx_packets = tx_packets

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PortStatistics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PortStatistics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

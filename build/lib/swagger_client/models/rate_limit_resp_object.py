# coding: utf-8

"""
    PRISM NBAPI

    This is a PRISM NBAPI API Client module.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: contact@kulcloud.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.rate_limit_merter_id import RateLimitMerterId  # noqa: F401,E501


class RateLimitRespObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'limit_name': 'str',
        'type': 'str',
        'rate': 'str',
        'burst_size': 'str',
        'meter_id': 'list[RateLimitMerterId]'
    }

    attribute_map = {
        'limit_name': 'limit_name',
        'type': 'type',
        'rate': 'rate',
        'burst_size': 'burst_size',
        'meter_id': 'meter_id'
    }

    def __init__(self, limit_name=None, type=None, rate=None, burst_size=None, meter_id=None):  # noqa: E501
        """RateLimitRespObject - a model defined in Swagger"""  # noqa: E501

        self._limit_name = None
        self._type = None
        self._rate = None
        self._burst_size = None
        self._meter_id = None
        self.discriminator = None

        if limit_name is not None:
            self.limit_name = limit_name
        if type is not None:
            self.type = type
        if rate is not None:
            self.rate = rate
        if burst_size is not None:
            self.burst_size = burst_size
        if meter_id is not None:
            self.meter_id = meter_id

    @property
    def limit_name(self):
        """Gets the limit_name of this RateLimitRespObject.  # noqa: E501


        :return: The limit_name of this RateLimitRespObject.  # noqa: E501
        :rtype: str
        """
        return self._limit_name

    @limit_name.setter
    def limit_name(self, limit_name):
        """Sets the limit_name of this RateLimitRespObject.


        :param limit_name: The limit_name of this RateLimitRespObject.  # noqa: E501
        :type: str
        """

        self._limit_name = limit_name

    @property
    def type(self):
        """Gets the type of this RateLimitRespObject.  # noqa: E501


        :return: The type of this RateLimitRespObject.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RateLimitRespObject.


        :param type: The type of this RateLimitRespObject.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def rate(self):
        """Gets the rate of this RateLimitRespObject.  # noqa: E501


        :return: The rate of this RateLimitRespObject.  # noqa: E501
        :rtype: str
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this RateLimitRespObject.


        :param rate: The rate of this RateLimitRespObject.  # noqa: E501
        :type: str
        """

        self._rate = rate

    @property
    def burst_size(self):
        """Gets the burst_size of this RateLimitRespObject.  # noqa: E501


        :return: The burst_size of this RateLimitRespObject.  # noqa: E501
        :rtype: str
        """
        return self._burst_size

    @burst_size.setter
    def burst_size(self, burst_size):
        """Sets the burst_size of this RateLimitRespObject.


        :param burst_size: The burst_size of this RateLimitRespObject.  # noqa: E501
        :type: str
        """

        self._burst_size = burst_size

    @property
    def meter_id(self):
        """Gets the meter_id of this RateLimitRespObject.  # noqa: E501


        :return: The meter_id of this RateLimitRespObject.  # noqa: E501
        :rtype: list[RateLimitMerterId]
        """
        return self._meter_id

    @meter_id.setter
    def meter_id(self, meter_id):
        """Sets the meter_id of this RateLimitRespObject.


        :param meter_id: The meter_id of this RateLimitRespObject.  # noqa: E501
        :type: list[RateLimitMerterId]
        """

        self._meter_id = meter_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RateLimitRespObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RateLimitRespObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
